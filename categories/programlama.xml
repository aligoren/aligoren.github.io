<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Ali GÖREN (programlama)</title><link>https://aligoren.com/</link><description></description><atom:link href="https://aligoren.com/categories/programlama.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Wed, 13 Apr 2016 19:55:45 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Python ve NGram Algoritması</title><link>https://aligoren.com/python-ve-ngram-algoritmasi/</link><dc:creator>Ali</dc:creator><description>&lt;div&gt;&lt;p&gt;Bu yazıyı yazmadan önce google'da sayısızca arama yapıyordum. Beni çıldırtan bir olay oldu. Şimdi aradığım şey örneğin &lt;strong&gt;ahmet&lt;/strong&gt; tamam iyi hoş arıyorsun da. Gelip bana neden "Bunu mu denemek istediniz?" şeklinde soru soruyorsun. Neyse önerdiği şeye tıklıyorum. Hobaa. Eski yazdığımı öneriyor bu sefer.&lt;/p&gt;
&lt;p&gt;Meselenin aslı şu. Ne yazmaya çalıştığımı nasıl olur da bilebilir ki google? Pek de bildiği söylenemez :P. Bu yazıda anlatmaya çalışacağım NGram tarzı bir algoritma kullandıkları kesin. Bakarsınız onlar tam da bunu kullanıyorlardır.
&lt;/p&gt;&lt;p&gt;&lt;a href="https://aligoren.com/python-ve-ngram-algoritmasi/"&gt;Devamını Oku…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>programlama</category><category>python</category><guid>https://aligoren.com/python-ve-ngram-algoritmasi/</guid><pubDate>Wed, 13 Apr 2016 19:33:15 GMT</pubDate></item><item><title>Flask ile JSON Çıktı Almak</title><link>https://aligoren.com/flask-ile-json-cikti-almak/</link><dc:creator>Ali</dc:creator><description>&lt;div&gt;&lt;p&gt;Flask framework'ü bilmeyen yoktur. Bu yazı hiç kullanmamış arkadaşlar için değil baştan belirteyim. Bu yazıda Flask framework ile nasıl json çıktı alırız onu anlatmaya çalışacağım.&lt;/p&gt;
&lt;p&gt;Öncelikle flask kurulu olmalı onu biliyoruz. json çıktı alma işlemi için ben flask ile gelen jsonify metodunu tercih ediyorum. Siz isterseniz klasik json da kullanabilirsiniz. İki türlü de aynı çalışıyor. Sadece jsonify çıktıları biraz daha güzel gösteriyor. Ben bu yazı için hazırladığım uygulamada işi biraz farklı bir noktaya taşıdım ve sanki bir api varmış gibi çalışsın istedim.
&lt;/p&gt;&lt;p&gt;&lt;a href="https://aligoren.com/flask-ile-json-cikti-almak/"&gt;Devamını Oku…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>flask</category><category>programlama</category><category>python</category><guid>https://aligoren.com/flask-ile-json-cikti-almak/</guid><pubDate>Sat, 02 Apr 2016 21:00:00 GMT</pubDate></item><item><title>Python'da Zincirleme Metodlar</title><link>https://aligoren.com/pythonda-zincirleme-metodlar/</link><dc:creator>Ali</dc:creator><description>&lt;div&gt;&lt;p&gt;Zincirleme metodlar, bir sınıfa ait metodları tek seferde çağırma şeklinde çalışırlar. Burada amaç kod okunabilirliğini artırmaktır. Çalışma mantığı olarak metod kendisini döndürür ve bu sayede peşine başka bir metod eklenebilir. Çalışma şeklinden dolayı bunlara zincirleme metod yani &lt;code&gt;Chaining Methods&lt;/code&gt; deniliyor. Çalışma mantığını anladık ama biraz daha açıklamak gerekiyor. Örneğin bir &lt;code&gt;Cars&lt;/code&gt; sınıfında o sınıfa ait belirli metodlar bulunmakta. Bu metodların şöyle olduğunu düşünelim sahtece:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;A Sınıfı =&amp;gt;
    A1_Metodu =&amp;gt;
        ... işlemler
    A2_Metodu =&amp;gt;
        ... işlemler
    A3_Metodu =&amp;gt;
        ... işlemler
&lt;/pre&gt;


&lt;p&gt;Böyle bir yapıda sınıfımızı &lt;strong&gt;b&lt;/strong&gt; değişkenine ilklediğimizi ve metodları çağırdığımızı düşünelim. O zaman durum şu olurdu&lt;/p&gt;
&lt;pre class="code literal-block"&gt;b = A Sınıfı
b.A1_Metodu
b.A2_Metodu
b.A3_Metodu
&lt;/pre&gt;


&lt;p&gt;gibi tam da burada yardımcı olarak zincirleme metod deseni geliyor önümüze. Eğer bir chaining metod olsaydı yukarıdaki gibi alt alta bir tekrar yerine şöyle olacaktı:
&lt;/p&gt;&lt;p&gt;&lt;a href="https://aligoren.com/pythonda-zincirleme-metodlar/"&gt;Devamını Oku…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>programlama</category><category>python</category><guid>https://aligoren.com/pythonda-zincirleme-metodlar/</guid><pubDate>Wed, 30 Mar 2016 21:00:00 GMT</pubDate></item><item><title>Python'da Struct Kullanımı</title><link>https://aligoren.com/pythonda-struct-kullanimi/</link><dc:creator>Ali</dc:creator><description>&lt;div&gt;&lt;p&gt;Evet var olmaz demeyin lütfen. Kısacası struct bir şablon olarak gelir önümüze. Bildiğimiz manada struct, farklı verileri bir araya getiriyoruz yani aslında grupluyor. Peki kullanımı nasıldı ki &lt;strong&gt;"Python'da"&lt;/strong&gt; ile başlayan bir başlık attım ki?&lt;/p&gt;
&lt;p&gt;Örneğin D dilinden örnek verecek olursak Ali Çehreli hocam çok güzel &lt;a href="http://ddili.org/ders/d/yapilar.html"&gt;açıklamış&lt;/a&gt;:
&lt;/p&gt;&lt;p&gt;&lt;a href="https://aligoren.com/pythonda-struct-kullanimi/"&gt;Devamını Oku…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>programlama</category><category>python</category><guid>https://aligoren.com/pythonda-struct-kullanimi/</guid><pubDate>Tue, 29 Mar 2016 21:00:00 GMT</pubDate></item><item><title>Django RSS Feed Ekleme</title><link>https://aligoren.com/django-rss-feed-ekleme/</link><dc:creator>Ali</dc:creator><description>&lt;div&gt;&lt;p&gt;Django’da RSS Feed ekleme işlemi çok basittir. Uzun uzun anlatabilir miyim diye düşündüm ancak yine de başaramam herhalde. Öncelikle yapılması gerekenleri söylemek gerekiyor sanırım.&lt;/p&gt;
&lt;p&gt;Uygulamamız içerisine feeds.py dosyasını oluşturalım ( siz isterseniz mahmut.py deyin ) Oluşturma işlemini başarıyla yaptıysanız şimdi bu dosyanın içine sınıf oluşturmalıyız. Bunun için Django’nun &lt;a href="https://docs.djangoproject.com/en/1.9/ref/contrib/syndication/"&gt;Feed Framework&lt;/a&gt;‘ünü çağırmak gerekiyor. Bir de slug yani url için de core kütüphanesinde bulunan reverse() işlevini çağıralım. &lt;/p&gt;&lt;p&gt;&lt;a href="https://aligoren.com/django-rss-feed-ekleme/"&gt;Devamını Oku…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>django</category><category>programlama</category><category>python</category><guid>https://aligoren.com/django-rss-feed-ekleme/</guid><pubDate>Sat, 27 Feb 2016 22:00:00 GMT</pubDate></item><item><title>Django Markdown Editör Kurulumu</title><link>https://aligoren.com/django-markdown-editor-kurulumu/</link><dc:creator>Ali</dc:creator><description>&lt;div&gt;&lt;p&gt;Okuldaki işler harici evde de kişisel olarak python ve arkadaşlarının icatları ile ilgileniyorum. Bu süreçte django ile kendi blog sistemimi yazmaya karar verdim. Ancak editör öyle kötüydü ki (hiç yok klasik textarea :D) markdown editör aramaya koyuldum. Daha önce Laravel ile &lt;a href="https://github.com/aligoren/larablog"&gt;yazdığım&lt;/a&gt; blog sisteminde de kullandığım editör geldi aklıma.&lt;/p&gt;
&lt;p&gt;Taufan Aditya tarafından yazılan &lt;a href="https://github.com/toopay/bootstrap-markdown"&gt;bootstrap-markdown&lt;/a&gt; kullanmıştım. Neyse bu işin görsel yüzü. Ancak arkada hala çözümlenmeyi bekleyen markdown kuralları vardı. Bunun için bulabildiğim en uygun markdown eklentisi Kirill Klenov tarafından yazılan &lt;a href="https://github.com/klen/django_markdown"&gt;django_markdown&lt;/a&gt; eklentisiydi. Neyse bulduk ettik bir şekilde. Sıra kuruluma geliyor.Öncelikle editör entegrasyonunu yapalım. Şu linkten editör dosyalarını indirelim. İlgili klasöre çıkaralım. Statik dosyaların static altında olduğunu varsayarak yaptığınızı düşünelim. Ben şöyle yaptım: &lt;/p&gt;&lt;p&gt;&lt;a href="https://aligoren.com/django-markdown-editor-kurulumu/"&gt;Devamını Oku…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>django</category><category>markdown</category><category>programlama</category><category>python</category><guid>https://aligoren.com/django-markdown-editor-kurulumu/</guid><pubDate>Tue, 23 Feb 2016 22:00:00 GMT</pubDate></item><item><title>Sublime Text’i Go IDE’sine Çevirin</title><link>https://aligoren.com/sublime-texti-go-idesine-cevirin/</link><dc:creator>Ali</dc:creator><description>&lt;div&gt;&lt;p&gt;Go dili programcıları arttıkça kaliteli editör, ide arayışları da aynı orantıda artmakta.&lt;/p&gt;
&lt;p&gt;Python, C, C++, Ruby, Java, PHP, Javascript gibi aklınıza gelebilecek diller için IDE bulmak kolay. Bu diller hem kendisini kanıtlamış hem de uzun geçmişe sahip olan diller.&lt;/p&gt;
&lt;p&gt;Eğer arkanızda Microsoft gibi dev yoksa o zaman Visual Studio gibi bir IDE bulmanız şans işi. Diğer firmaları da sıralayacak olursak JetBrains, Xamarin gibi firmalar da mevcut. Bu firmaların da kaliteli ürünleri olsa dahi aradığınız dil için özellikle sağladıkları bir destek yok. Yani buradan da arayış yapmanız pek bir kar sağlamıyor.&lt;/p&gt;
&lt;p&gt;Gelelim yeni nesil diller konusuna. Bu dillerde aslında yeni nesil olmayanlar var ama popülerliğin son yıllardaki artışına bakarak söylemek gerekiyor. &lt;/p&gt;&lt;p&gt;&lt;a href="https://aligoren.com/sublime-texti-go-idesine-cevirin/"&gt;Devamını Oku…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>go</category><category>programlama</category><guid>https://aligoren.com/sublime-texti-go-idesine-cevirin/</guid><pubDate>Thu, 26 Nov 2015 22:00:00 GMT</pubDate></item><item><title>NodeJS’de json-server ile REST API Geliştirme</title><link>https://aligoren.com/nodejsde-json-server-ile-rest-api-gelistirme/</link><dc:creator>Ali</dc:creator><description>&lt;div&gt;&lt;p&gt;Rest API artık yazılım dünyasının vazgeçilmezleri arasında. Öyle ki iş ilanlarında sadece REST API yazacak kişiler aranıyor yazmakta.&lt;/p&gt;
&lt;p&gt;Bu kadar popüler olan bir konunun da elbet ki işleri kolaylaştıran araçları olmalıdır. Siz bir kolaylık arıyorsanız elbette bu kolaylığı sizin için sağlayacak kişiler de oluyor.&lt;/p&gt;
&lt;p&gt;Bu kolaylıklardan birisi de NodeJS çatısı altında çalışan json-server. json-server size basit sahte fake rest api geliştirme imkanı sağlıyor. Bunu hemen hemen hiç kod yazmadan yapmanıza imkan tanıyor. Sahte bir api dedik ancak eğer sağlanacak değerler belirli yani statik ise bu sahte olmaktan çıkıp sizin gerçek dünya uygulamanızda da yer alabilir. İsterseniz json-server kurulumunu gerçekleştirip bir örnek uygulama yapalım. Böylece daha iyi anlaşılır.
Kurulum
&lt;/p&gt;&lt;p&gt;&lt;a href="https://aligoren.com/nodejsde-json-server-ile-rest-api-gelistirme/"&gt;Devamını Oku…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>nodejs</category><category>programlama</category><guid>https://aligoren.com/nodejsde-json-server-ile-rest-api-gelistirme/</guid><pubDate>Mon, 16 Nov 2015 22:00:00 GMT</pubDate></item><item><title>Hanoi Kuleleri Algoritması</title><link>https://aligoren.com/hanoi-kuleleri-algoritmasi/</link><dc:creator>Ali</dc:creator><description>&lt;div&gt;&lt;p&gt;Hanoi kuleleri, Fransız matematikçi, Edouard Lucas tarafından önerilen bir çözüm yöntemidir. A,B ve C gibi dik konumda yerleştirilmiş üç çubuk ve N kadar disk içermektedir. İşleyiş şöyledir:&lt;/p&gt;
&lt;p&gt;Başlangıçta diskler, üstteki her diskin çapı daha büyük olmak şartıyla A çubuğuna yerleştirilir. Her seferinde sadece bir diskin hareketine izin verildiğinde, büyük disk, küçük diskin üzerine yerleştirilmeden, disklerin C çubuğuna taşınması gerekmektedir.&lt;/p&gt;
&lt;p&gt;Hanoi problemi, problem alt problemlere parçalanarak çözülebilir. Problemde N kadar disk olduğunu varsayarsak recursive şekilde bir çözüm şu şekilde olabilir:&lt;/p&gt;
&lt;p&gt;Sadece bir disk direkt olarak 3. çubuğa konulur N kadar disk 3. adıma yerleştirilmeli &lt;/p&gt;&lt;p&gt;&lt;a href="https://aligoren.com/hanoi-kuleleri-algoritmasi/"&gt;Devamını Oku…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>programlama</category><category>python</category><guid>https://aligoren.com/hanoi-kuleleri-algoritmasi/</guid><pubDate>Sun, 15 Nov 2015 22:00:00 GMT</pubDate></item><item><title>Hamming Sayıları</title><link>https://aligoren.com/hamming-sayilari/</link><dc:creator>Ali</dc:creator><description>&lt;div&gt;&lt;p&gt;Hamming sayıları, 2,3 ve 5’ten başka diğer asal bölene sahip olmayan dizilerdir. Örnek verecek olursak hamming dizisi şöyledir.&lt;/p&gt;
&lt;p&gt;İlk 60 Hamming Sayısı: 2 3 4 5 6 8 9 10 12 15 16 18 20 24 25 27 30 32 36 40 45 48 50 54 60… şeklinde gider.&lt;/p&gt;
&lt;p&gt;Sıradaki sayının bulunması üç farklı durumdan oluşmakta. Sayı 2’ye bölünebiliyorsa bir sonraki aşamada 2,3 ve 5 dışında böleni olmayacak.&lt;/p&gt;
&lt;p&gt;Örneğin şöyle izah edilebilir. &lt;/p&gt;&lt;p&gt;&lt;a href="https://aligoren.com/hamming-sayilari/"&gt;Devamını Oku…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>programlama</category><category>python</category><guid>https://aligoren.com/hamming-sayilari/</guid><pubDate>Sat, 14 Nov 2015 22:00:00 GMT</pubDate></item></channel></rss>