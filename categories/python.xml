<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Ali GÖREN (python)</title><link>https://aligoren.com/</link><description></description><atom:link href="https://aligoren.com/categories/python.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Wed, 30 Mar 2016 19:03:42 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Python'da Struct Kullanımı</title><link>https://aligoren.com/pythonda-struct-kullanimi/</link><dc:creator>Ali</dc:creator><description>&lt;div&gt;&lt;p&gt;Evet var olmaz demeyin lütfen. Kısacası struct bir şablon olarak gelir önümüze. Bildiğimiz manada struct, farklı verileri bir araya getiriyoruz yani aslında grupluyor. Peki kullanımı nasıldı ki &lt;strong&gt;"Python'da"&lt;/strong&gt; ile başlayan bir başlık attım ki?&lt;/p&gt;
&lt;p&gt;Örneğin D dilinden örnek verecek olursak Ali Çehreli hocam çok güzel &lt;a href="http://ddili.org/ders/d/yapilar.html"&gt;açıklamış&lt;/a&gt;:
&lt;/p&gt;&lt;p&gt;&lt;a href="https://aligoren.com/pythonda-struct-kullanimi/"&gt;Devamını Oku…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>programlama</category><category>python</category><guid>https://aligoren.com/pythonda-struct-kullanimi/</guid><pubDate>Tue, 29 Mar 2016 21:00:00 GMT</pubDate></item><item><title>Django RSS Feed Ekleme</title><link>https://aligoren.com/django-rss-feed-ekleme/</link><dc:creator>Ali</dc:creator><description>&lt;div&gt;&lt;p&gt;Django’da RSS Feed ekleme işlemi çok basittir. Uzun uzun anlatabilir miyim diye düşündüm ancak yine de başaramam herhalde. Öncelikle yapılması gerekenleri söylemek gerekiyor sanırım.&lt;/p&gt;
&lt;p&gt;Uygulamamız içerisine feeds.py dosyasını oluşturalım ( siz isterseniz mahmut.py deyin ) Oluşturma işlemini başarıyla yaptıysanız şimdi bu dosyanın içine sınıf oluşturmalıyız. Bunun için Django’nun &lt;a href="https://docs.djangoproject.com/en/1.9/ref/contrib/syndication/"&gt;Feed Framework&lt;/a&gt;‘ünü çağırmak gerekiyor. Bir de slug yani url için de core kütüphanesinde bulunan reverse() işlevini çağıralım. &lt;/p&gt;&lt;p&gt;&lt;a href="https://aligoren.com/django-rss-feed-ekleme/"&gt;Devamını Oku…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>django</category><category>programlama</category><category>python</category><guid>https://aligoren.com/django-rss-feed-ekleme/</guid><pubDate>Sat, 27 Feb 2016 22:00:00 GMT</pubDate></item><item><title>Django Markdown Editör Kurulumu</title><link>https://aligoren.com/django-markdown-editor-kurulumu/</link><dc:creator>Ali</dc:creator><description>&lt;div&gt;&lt;p&gt;Okuldaki işler harici evde de kişisel olarak python ve arkadaşlarının icatları ile ilgileniyorum. Bu süreçte django ile kendi blog sistemimi yazmaya karar verdim. Ancak editör öyle kötüydü ki (hiç yok klasik textarea :D) markdown editör aramaya koyuldum. Daha önce Laravel ile &lt;a href="https://github.com/aligoren/larablog"&gt;yazdığım&lt;/a&gt; blog sisteminde de kullandığım editör geldi aklıma.&lt;/p&gt;
&lt;p&gt;Taufan Aditya tarafından yazılan &lt;a href="https://github.com/toopay/bootstrap-markdown"&gt;bootstrap-markdown&lt;/a&gt; kullanmıştım. Neyse bu işin görsel yüzü. Ancak arkada hala çözümlenmeyi bekleyen markdown kuralları vardı. Bunun için bulabildiğim en uygun markdown eklentisi Kirill Klenov tarafından yazılan &lt;a href="https://github.com/klen/django_markdown"&gt;django_markdown&lt;/a&gt; eklentisiydi. Neyse bulduk ettik bir şekilde. Sıra kuruluma geliyor.Öncelikle editör entegrasyonunu yapalım. Şu linkten editör dosyalarını indirelim. İlgili klasöre çıkaralım. Statik dosyaların static altında olduğunu varsayarak yaptığınızı düşünelim. Ben şöyle yaptım: &lt;/p&gt;&lt;p&gt;&lt;a href="https://aligoren.com/django-markdown-editor-kurulumu/"&gt;Devamını Oku…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>django</category><category>markdown</category><category>programlama</category><category>python</category><guid>https://aligoren.com/django-markdown-editor-kurulumu/</guid><pubDate>Tue, 23 Feb 2016 22:00:00 GMT</pubDate></item><item><title>Hanoi Kuleleri Algoritması</title><link>https://aligoren.com/hanoi-kuleleri-algoritmasi/</link><dc:creator>Ali</dc:creator><description>&lt;div&gt;&lt;p&gt;Hanoi kuleleri, Fransız matematikçi, Edouard Lucas tarafından önerilen bir çözüm yöntemidir. A,B ve C gibi dik konumda yerleştirilmiş üç çubuk ve N kadar disk içermektedir. İşleyiş şöyledir:&lt;/p&gt;
&lt;p&gt;Başlangıçta diskler, üstteki her diskin çapı daha büyük olmak şartıyla A çubuğuna yerleştirilir. Her seferinde sadece bir diskin hareketine izin verildiğinde, büyük disk, küçük diskin üzerine yerleştirilmeden, disklerin C çubuğuna taşınması gerekmektedir.&lt;/p&gt;
&lt;p&gt;Hanoi problemi, problem alt problemlere parçalanarak çözülebilir. Problemde N kadar disk olduğunu varsayarsak recursive şekilde bir çözüm şu şekilde olabilir:&lt;/p&gt;
&lt;p&gt;Sadece bir disk direkt olarak 3. çubuğa konulur N kadar disk 3. adıma yerleştirilmeli &lt;/p&gt;&lt;p&gt;&lt;a href="https://aligoren.com/hanoi-kuleleri-algoritmasi/"&gt;Devamını Oku…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>programlama</category><category>python</category><guid>https://aligoren.com/hanoi-kuleleri-algoritmasi/</guid><pubDate>Sun, 15 Nov 2015 22:00:00 GMT</pubDate></item><item><title>Hamming Sayıları</title><link>https://aligoren.com/hamming-sayilari/</link><dc:creator>Ali</dc:creator><description>&lt;div&gt;&lt;p&gt;Hamming sayıları, 2,3 ve 5’ten başka diğer asal bölene sahip olmayan dizilerdir. Örnek verecek olursak hamming dizisi şöyledir.&lt;/p&gt;
&lt;p&gt;İlk 60 Hamming Sayısı: 2 3 4 5 6 8 9 10 12 15 16 18 20 24 25 27 30 32 36 40 45 48 50 54 60… şeklinde gider.&lt;/p&gt;
&lt;p&gt;Sıradaki sayının bulunması üç farklı durumdan oluşmakta. Sayı 2’ye bölünebiliyorsa bir sonraki aşamada 2,3 ve 5 dışında böleni olmayacak.&lt;/p&gt;
&lt;p&gt;Örneğin şöyle izah edilebilir. &lt;/p&gt;&lt;p&gt;&lt;a href="https://aligoren.com/hamming-sayilari/"&gt;Devamını Oku…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>programlama</category><category>python</category><guid>https://aligoren.com/hamming-sayilari/</guid><pubDate>Sat, 14 Nov 2015 22:00:00 GMT</pubDate></item><item><title>sys.argv Yerine Click Kullanın</title><link>https://aligoren.com/python-sys-argv-yerine-click-kullanin/</link><dc:creator>Ali</dc:creator><description>&lt;div&gt;&lt;p&gt;Python ile konsol uygulamaları geliştirirken, konsolda bazen programı direkt olarak çağırmadan parametre kontrolü yapmamız gerekebiliyor. Örneğin şöyle bir çağrı:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;program.py --falan=filan&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Bu program basit ilkel yöntemlerce sys.argv kontrolü şeklinde yapılmakta. Ancak bunun doğruluğu için dahi uzunca uğraşmak gerekiyor.&lt;/p&gt;
&lt;p&gt;Bu sorunu aşmak için çeşitli kütüphaneler mevcuttur. Örneğin argparse, docopt gibi kütüphaneler de bu soruna kolaylık sağlıyorlar. Ancak bunların yapıları gerçekten çok karmaşık. Örneğin argparse interspersed dediğimiz argümanların devre dışı bırakılmasını desteklemiyor. Bu güvenlik açısından bir sorun oluşturabilir. &lt;/p&gt;&lt;p&gt;&lt;a href="https://aligoren.com/python-sys-argv-yerine-click-kullanin/"&gt;Devamını Oku…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>programlama</category><category>python</category><guid>https://aligoren.com/python-sys-argv-yerine-click-kullanin/</guid><pubDate>Wed, 11 Nov 2015 22:00:00 GMT</pubDate></item><item><title>E Sayısının Hesaplanması</title><link>https://aligoren.com/e-sayisinin-hesaplanmasi/</link><dc:creator>Ali</dc:creator><description>&lt;div&gt;&lt;p&gt;E Sayısını Tanıyalım&lt;/p&gt;
&lt;p&gt;E sayısı ünlü bir irrasyonel sayıdır ve matematiğin en önemli sayılarındandır. E sayısı, ilk olarak İskoç Matematikçi John Napier tarafından ortaya atılmıştır. Napier, E sayısını 1618 yılında yayınladığı logaritmalar kitabının ekinde yayınlamıştır. Esasen dolaylı olarak bir değinme olmuş. E sayısının keşfi ise kitabın yayınlandığı tarihten çok daha sonraları gerçekleşmiş. Jakob Bernoulli 1683 yılında birleşik faiz problemini incelerken e sayıını keşfetmiş. Bu öyle bir sayı ki bir sürü kişi uğraşmış ama bu sayıya adını Leonhard Euler vermiştir. E sayısı adını 1731 yılında almıştır. Euler sayısı, “Oiler” olarak telafuz ediliyormuş.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://aligoren.com/e-sayisinin-hesaplanmasi/"&gt;Devamını Oku…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>programlama</category><category>python</category><guid>https://aligoren.com/e-sayisinin-hesaplanmasi/</guid><pubDate>Wed, 30 Sep 2015 21:00:00 GMT</pubDate></item><item><title>Sublime Text 2’de Python 3 ile Çalışmak</title><link>https://aligoren.com/sublime-text-2de-python-3-ile-calismak/</link><dc:creator>Ali</dc:creator><description>&lt;div&gt;&lt;p&gt;Selam. Sublime Text 2 kullanan arkadaşlar default olarak “python” tanımlı olarak geliyor. Ancak Python3 gerektiren yerlerde maalesef kullanamıyoruz.&lt;/p&gt;
&lt;p&gt;Bunu şöyle çözmek mümkün öncelikle konsola şu görseldeki komutu veriyoruz
&lt;/p&gt;&lt;p&gt;&lt;a href="https://aligoren.com/sublime-text-2de-python-3-ile-calismak/"&gt;Devamını Oku…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>programlama</category><category>python</category><guid>https://aligoren.com/sublime-text-2de-python-3-ile-calismak/</guid><pubDate>Fri, 23 Aug 2013 21:00:00 GMT</pubDate></item></channel></rss>